name: Release on tag (build + release + changelog)

on:
  push:
    tags:
      - 'v*'   # v2.0.73, v2.0.73-rc.1, etc.

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write   # créer/mettre à jour la Release + pousser le changelog

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          # on garde les credentials pour pouvoir pousser sur la branche
          persist-credentials: true

      # <<< Ajout important : identité Git globale pour les commits >>>
      - name: Configure Git identity
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install deps
        run: npm ci

      - name: Build Player
        run: |
          if [ -f package.json ]; then
            npm run build || npm run build:web || echo "no build"
          fi

      # tag = vX.Y.Z | vX.Y.Z-rc.N
      # version = X.Y.Z-rc.N
      # base_version = X.Y.Z
      # prerelease = true si -rc dans le tag
      - name: Compute meta (tag, version, base_version, prerelease)
        id: meta
        run: |
          TAG="${GITHUB_REF_NAME}"
          VERSION="${TAG#v}"
          BASE_VERSION="$(printf "%s" "$VERSION" | sed 's/-rc\..*$//')"
          PRERELEASE="false"
          echo "$TAG" | grep -qi -- "-rc" && PRERELEASE="true"

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "base_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT

      - name: Prepare artifact (zip if build exists)
        id: artifact
        run: |
          mkdir -p out
          OUT="out/player-${{ steps.meta.outputs.version }}.zip"
          if [ -d ".next" ]; then
            zip -r "$OUT" .next >/dev/null
            echo "path=$OUT" >> $GITHUB_OUTPUT
          elif [ -d "dist" ]; then
            zip -r "$OUT" dist >/dev/null
            echo "path=$OUT" >> $GITHUB_OUTPUT
          elif [ -d "build" ]; then
            zip -r "$OUT" build >/dev/null
            echo "path=$OUT" >> $GITHUB_OUTPUT
          else
            echo "path=" >> $GITHUB_OUTPUT
            echo "No build dir found (.next / dist / build) — release will be created without artifact."
          fi

      - name: Pick release notes file (supports RC fallback)
        id: notes
        run: |
          # 1) RC exact : RELEASE_NOTES_vX.Y.Z-rc.N.md
          CANDIDATE="RELEASE_NOTES_${{ steps.meta.outputs.tag }}.md"
          # 2) Fallback stable : RELEASE_NOTES_vX.Y.Z.md
          FALLBACK="RELEASE_NOTES_v${{ steps.meta.outputs.base_version }}.md"

          if [ -f "$CANDIDATE" ]; then
            echo "file=$CANDIDATE" >> $GITHUB_OUTPUT
          elif [ -f "$FALLBACK" ]; then
            echo "file=$FALLBACK" >> $GITHUB_OUTPUT
          else
            echo "file=" >> $GITHUB_OUTPUT
          fi

      # ===== Create GitHub Release (toutes combinaisons notes/artifact) =====
      - name: Create GitHub Release (notes + artifact)
        if: steps.notes.outputs.file != '' && steps.artifact.outputs.path != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: IO Beats Player ${{ steps.meta.outputs.tag }}
          prerelease: ${{ steps.meta.outputs.prerelease }}
          body_path: ${{ steps.notes.outputs.file }}
          files: ${{ steps.artifact.outputs.path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release (notes, no artifact)
        if: steps.notes.outputs.file != '' && steps.artifact.outputs.path == ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: IO Beats Player ${{ steps.meta.outputs.tag }}
          prerelease: ${{ steps.meta.outputs.prerelease }}
          body_path: ${{ steps.notes.outputs.file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release (no notes, artifact)
        if: steps.notes.outputs.file == '' && steps.artifact.outputs.path != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: IO Beats Player ${{ steps.meta.outputs.tag }}
          prerelease: ${{ steps.meta.outputs.prerelease }}
          files: ${{ steps.artifact.outputs.path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release (no notes, no artifact)
        if: steps.notes.outputs.file == '' && steps.artifact.outputs.path == ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          name: IO Beats Player ${{ steps.meta.outputs.tag }}
          prerelease: ${{ steps.meta.outputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ===== Update CHANGELOG.md =====
      - name: Update CHANGELOG.md from release notes (or skeleton)
        env:
          TAG: ${{ steps.meta.outputs.tag }}
        run: node scripts/update-changelog.mjs

      - name: Commit & push changelog (if changed)
        run: |
          if git diff --quiet -- CHANGELOG.md; then
            echo "No changes in CHANGELOG.md"
          else
            git add CHANGELOG.md
            git commit -m "docs(changelog): add ${{ steps.meta.outputs.tag }}"
            git push
          fi
